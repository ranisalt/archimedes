#!/usr/bin/bash -x

chroot='/mnt'

### PACKAGE SELECTION ###
packages=(
	# base + base-devel
	file
	gettext
	licenses
	linux
	logrotate
	man-db
	pacman
	procps-ng
	sed
	sysfsutils
	systemd-sysvcompat
	tar
	which
	base-devel

	# extra + community
	adobe-source-{sans,serif}-pro-fonts
	arc-{gtk,icon}-theme
	bluez{,-plugins,-utils}
	docker
	efibootmgr
	f2fs-tools
	firefox-developer-edition
	firejail
	fish
	git
	grim slurp
	htop
	intel-ucode
	kitty
	linux-zen
	mtr
	neovim
	openssh
	otf-fira-code
	ranger
	rng-tools
	sddm
	stow
	sway swaybg waybar
	systemd-swap
	telegram-desktop
	tlp
	tree
	udevil
	{glew,glfw,qt5}-wayland
)

# CHECK MIRROR CONNECTION
ping -c 1 archlinux.org &>/dev/null || {
	echo "Could not connect to archlinux.org, please check cables"
	exit 69
}

# PARTITIONING AND LABELING
partitioning() {
	parted -s -- /dev/sda mklabel gpt
	parted -s --align optimal -- /dev/sda \
		mkpart primary fat32 0% 200MiB \
		mkpart primary f2fs 200MiB 20% \
		mkpart primary f2fs 20% 100%\
		set 1 boot on

	yes | {
		mkfs.vfat -F32 -L BOOT /dev/sda1
		mkfs.f2fs -L ROOT /dev/sda2
		mkfs.f2fs -L HOME /dev/sda3
	}

	# MOUNT PARTITIONS
	# Labels are useful
	mount -L ROOT "$chroot"
	mkdir -pv "$chroot/boot" "$chroot/home"
	mount -L BOOT "$chroot/boot"
	mount -L HOME "$chroot/home"
}

# BOOTSTRAP
# Configure mirrorlist and run pacstrap
bootstrap() {
	MIRRORLIST='https://www.archlinux.org/mirrorlist/all/http/'
	curl -sSL "$MIRRORLIST" | sed -e 's/^#S/S/' | rankmirrors -n 5 --max-time 1.0 --verbose - > /etc/pacman.d/mirrorlist
	eval pacstrap "$chroot" "${packages[*]}"
}

# CONFIGURE ON CHROOT
# Does some things other than write to files
configure_chroot() {
	# I do not use genfstab because I need a more fine grained approach
	cat <<-EOF > "$chroot/etc/fstab"
		# LOCAL MOUNTS
		# Disable automount on /boot increases security, and letting systemd handle makes it more comfortable :)
		PARTUUID="$(lsblk -no PARTUUID /dev/sda1)" /boot vfat noauto,lazytime,nodev,noexec,nosuid,x-systemd.automount,umask=0077 0 2
		PARTUUID="$(lsblk -no PARTUUID /dev/sda3)" /home f2fs noauto,lazytime,nodev,nosuid,commit=60,x-systemd.automount 0 0
	EOF

	# Configure mkinitcpio to skip compression. It's faster.
	sed -i 's/^\(COMPRESSION\)/#\1/g' "$chroot/etc/mkinitcpio.conf"
	echo 'COMPRESSION="cat"' >> "$chroot/etc/mkinitcpio.conf"

	# Generate locales
	sed -i 's/#\(en_US.UTF-8\)/\1/' "$chroot/etc/locale.gen"
	echo 'LANG=en_US.UTF-8' > "$chroot/etc/locale.conf"
	arch-chroot "$chroot" locale-gen

	# Read and store common user and password
	echo -n 'What is the desired username?'
	read -er username
	arch-chroot "$chroot" useradd -m -G audio,users,video,wheel "$username"

	echo -n "What is the desired $username password?"
	read -ers password

	# Read and store root password
	echo -n 'What is the desired root password?'
	read -ers rootpw
	arch-chroot "$chroot" chpasswd <<-EOF
		root:$rootpw
		$username:$password
	EOF
	unset rootpw

	# Let wheel users use sudo
	sed -i 's/^#.*?\(%wheel ALL=(ALL) ALL\)/\1/' "$chroot/etc/sudoers"
}

configure_systemd() {
	echo -n 'What is the desired machine hostname?'
	read -er hostname
	arch-chroot "$chroot" hostnamectl set-hostname "$hostname"

	mkdir -pv $chroot/etc/systemd/{network,{resolved,swap}.conf.d}

	# systemd-networkd
	cat <<-EOF > "$chroot/etc/systemd/network/wired.network"
		[Match]
		Name=enp*

		[Network]
		DHCP=yes
		IPForward=kernel
		IPv6PrivacyExtensions=kernel

		[DHCP]
		RouteMetric=10
	EOF
	cat <<-EOF > "$chroot/etc/systemd/network/wireless.network"
		[Match]
		Name=wlp*

		[Network]
		DHCP=yes
		IPForward=kernel
		IPv6PrivacyExtensions=kernel

		[DHCP]
		RouteMetric=20
	EOF

	# systemd-resolved
	cat <<-EOF > "$chroot/etc/systemd/resolved.conf.d/resolved.conf"
		[Resolve]
		FallbackDNS=1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001
	EOF

	# systemd-swap
	cat <<-EOF > "$chroot/etc/systemd/swap.conf.d/swap.conf"
		swapd_auto_swapon=0
		zram_alg=lzo-rle
		zram_enabled=1
		zswap_enabled=0
	EOF

	arch-chroot "$chroot" localectl set-keymap 'br-abnt2'
	arch-chroot "$chroot" localectl set-x11-keymap 'br' 'abnt2' '' 'ctrl:swapcaps'
	arch-chroot "$chroot" timedatectl set-timezone 'America/Sao_Paulo'
	arch-chroot "$chroot" systemctl enable {rngd,sddm,systemd-{networkd,resolved,swap,timesyncd}}.service {docker,sshd}.socket
}

# INSTALL BOOTLOADER
install_bootloader() {
	ROOTFS="root=PARTUUID=$(lsblk -no PARTUUID /dev/sda2) rootfstype=f2fs rootflags=fastboot,lazytime rw"
	INITRD='initrd=/intel-ucode.img initrd=/initramfs-linux-zen.img'
	ESSENTIAL="$ROOTFS $INITRD"

	BLOCK='elevator=none scsi_mod.use_blk_mq=1'
	DISABLE='nmi_watchdog=off numa_balancing=disable'
	LOGGING='quiet loglevel=3 udev.log_priority=3'
	EXTRA="$BLOCK $DISABLE $LOGGING"

	arch-chroot "$chroot" efibootmgr --disk /dev/sda --part 2 \
		--create \
		--label 'Arch Linux' --loader '/vmlinuz-linux-zen' \
		--unicode "$ESSENTIAL $EXTRA"
}

partitioning
bootstrap
configure_chroot
configure_systemd
install_bootloader
